[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data transformation: dplyr package",
    "section": "",
    "text": "Data transformation is an important step before starting to visualize and analyze your data. Transformation may involve:\n\ncreating new variables and summaries\nrenaming some variables\nreordering observations\nformat variables\nselect variables\nperform analyses by group\nfilter/ subset observations\netc …\n\nThe dplyr package (Wickham et al. 2023) is the workhorse for data transformation in R."
  },
  {
    "objectID": "index.html#pipes-or",
    "href": "index.html#pipes-or",
    "title": "Data transformation: dplyr package",
    "section": "Pipes (|> or %>%)",
    "text": "Pipes (|&gt; or %&gt;%)\nPipes are used to combine operations. Pipes are very common in R codes that use functions from dplyr and tidyverse.\n\nsay we want to calculate the means for Sepal.Length and Sepal.Width columns by species for the iris dataset:\nI. One way to do this could be\n\nfirst, group the observations by Species\nsecond, calculate the means for the columns\n\n\n\nby_group = group_by(iris, Species)\n\nmeanSepals &lt;- summarise(by_group, \n                        mean_Sepal.Length = mean(Sepal.Length, na.rm = TRUE),\n                        mean_Sepal.Width = mean(Sepal.Width, na.rm = TRUE))\n\n\n\n\nSpeciesmean_Sepal.Lengthmean_Sepal.Widthsetosa5.0063.428versicolor5.9362.770virginica6.5882.974\n\n\n\nA second way is to combine the operations through a pipe, annotated by %&gt;% or |&gt; as shown in the code below\n\n\nmeanSepals2 &lt;- iris %&gt;% group_by(Species) %&gt;% \n  summarise(mean_Sepal.Length = mean(Sepal.Length, na.rm = TRUE), \n            mean_Sepal.Width = mean(Sepal.Width, na.rm = TRUE))\n\n\n\n\nSpeciesmean_Sepal.Lengthmean_Sepal.Widthsetosa5.0063.428versicolor5.9362.770virginica6.5882.974\n\n\n\nNote:\n\nthe group_by() and summarise() functions used here are discussed in later slides"
  },
  {
    "objectID": "index.html#select",
    "href": "index.html#select",
    "title": "Data transformation: dplyr package",
    "section": "Select()",
    "text": "Select()\nSelects columns by name or position\n\nSelect all sepal columns by name\n\n\n# Notes:\n## pipes: %&gt;%\n## select()\n\nirissubset =  iris %&gt;% select(Sepal.Length, Sepal.Width)\n\n\n\n\nSepal.LengthSepal.Width5.13.54.93.04.73.24.63.15.03.65.43.9\n\n\nAlternative ways of specifying columns\n\nUsing contains option in select function\n\ncontains picks out all column names having a Sepal pattern\n\n\n\n# Notes:\n## select(contains())\n\nirissubset =  iris %&gt;% select(contains(\"Sepal\"))\n\n\nBy position\n\n\nirissubset =  iris %&gt;% select(1:2)\n\n\n\n\nSepal.LengthSepal.Width5.13.54.93.04.73.24.63.15.03.65.43.9\n\n\nOther helper functions within select():\n\nstarts_with(“Sep”)\nends_with(““)\nnum_range(“x”, 1:3)\nUse select() together with everything() to reorder columns in a data frame as shown below\n\nInitial order of columns\n\nirissubset = head(iris)\n\n\n\n\nSepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies5.13.51.40.2setosa4.93.01.40.2setosa4.73.21.30.2setosa4.63.11.50.2setosa5.03.61.40.2setosa5.43.91.70.4setosa\n\n\nAfter moving Species and Petal columns to start\n\narranged_iris = irissubset %&gt;% select(Species, contains(\"Petal\"), everything()) \n\n\n\n\nSpeciesPetal.LengthPetal.WidthSepal.LengthSepal.Widthsetosa1.40.25.13.5setosa1.40.24.93.0setosa1.30.24.73.2setosa1.50.24.63.1setosa1.40.25.03.6setosa1.70.45.43.9"
  },
  {
    "objectID": "index.html#arrange",
    "href": "index.html#arrange",
    "title": "Data transformation: dplyr package",
    "section": "Arrange()",
    "text": "Arrange()\nSorts rows according to one or more columns\n\nby default, arrange() sorts in an ascending order\nto change to descending order, place a minus sign (i.e. -) before the ordering column\n\nalternative 2: use desc(column) function\nmissing values are always sorted to the end\n\n\n\nArrange: Ascending\n\nBefore arrange() is applied\n\nFor illustration, only the sepal columns are used\n\n\n\n# Notes\n## pipes: %&gt;%\n## select() \n\nirissubset = iris %&gt;% select(c(Sepal.Length, Sepal.Width))\n\n\n\n\nSepal.LengthSepal.Width5.13.54.93.04.73.24.63.15.03.65.43.9\n\n\n\nAfter arrange() is applied on Sepal.Length column\n\n\n# Notes:\n## pipes: %&gt;%\n## arrange()\n\narranged_iris = irissubset %&gt;% arrange(Sepal.Length)\n\n\n\n\nSepal.LengthSepal.Width4.33.04.42.94.43.04.43.24.52.34.63.1\n\n\n\n\nArrange: Descending\n\nBefore arrange()\n\nFor illustration, only the sepal columns are used\n\n\n\n# Notes\n## pipes: %&gt;%\n## select() \n\nirissubset = iris %&gt;% select(c(Sepal.Length, Sepal.Width))\n\n\n\n\nSepal.LengthSepal.Width5.13.54.93.04.73.24.63.15.03.65.43.9\n\n\n\nAfter applying arrange() on Sepal.Length column\n\n\n# Notes:\n## pipes: %&gt;%\n## arrange()\n\narranged_iris2 = irissubset %&gt;% arrange(-Sepal.Length)\n\n\n\n\nSepal.LengthSepal.Width7.93.87.73.87.72.67.72.87.73.07.63.0\n\n\n\n\nArrange on two columns\n\nBefore arrange()\n\nFor illustration, only the sepal columns are used\n\n\n\n# Notes\n## pipes: %&gt;%\n## select() \n\nirissubset = iris %&gt;% select(c(Sepal.Length, Sepal.Width))\n\n\n\n\nSepal.LengthSepal.Width5.13.54.93.04.73.24.63.15.03.65.43.9\n\n\n\nAfter arrange()\n\ndecreasing Sepal.Length, increasing Sepal.Width\n\n\n\n# Notes:\n## pipes: %&gt;%\n## arrange()\n\narranged_iris3 = irissubset %&gt;% arrange(-Sepal.Length, Sepal.Width)\n\n\n\n\nSepal.LengthSepal.Width7.93.87.72.67.72.87.73.07.73.87.63.0"
  },
  {
    "objectID": "index.html#mutate",
    "href": "index.html#mutate",
    "title": "Data transformation: dplyr package",
    "section": "Mutate()",
    "text": "Mutate()\nFor creating new variables to a dataset and/or transforming existing variables\n\nthe columns are always added at the end of the dataset\nas an example, if we want to calculate differences between Sepal & Petal lengths and widths\n\n\nirissubset = head(iris %&gt;% select(Species, everything()))\nirissubset = irissubset %&gt;% \n  mutate(SP_length_diff = Sepal.Length-Petal.Length, SP_width_diff = Sepal.Width - Petal.Width)\n\n\n\n\nSpeciesSepal.LengthSepal.WidthPetal.LengthPetal.WidthSP_length_diffSP_width_diffsetosa5.13.51.40.23.73.3setosa4.93.01.40.23.52.8setosa4.73.21.30.23.43.0setosa4.63.11.50.23.12.9setosa5.03.61.40.23.63.4setosa5.43.91.70.43.73.5\n\n\nSimilar to select(), mutate() can use many functions to create new variables:\n\narithmetic operators: +, -, *, /\nlogs\noffsets e.g. lead(), lag()\ncumulative and rolling aggregates: cumprod(), cumsum(), cummean() etc\n\n\nmutate_if()\nChecks if a condition is met before applying a transformation to a column\n\nsay we want to format all character variables to be factors in the iris dataset\n\n\nirissubset = head(iris %&gt;% select(Species, everything()))\n\n# calculate the ratios and then format the rel\nirissubset = irissubset %&gt;% \n  mutate(SP_len_ratio = Sepal.Length/Petal.Length, SP_wid_ratio = Sepal.Width/Petal.Width) %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\nmutate_at()\nAllows to specify specific columns on which an operation should be performed\n\nsay we want to format all ratios between corresponding Sepal and Petal variables to appear with 2 decimal places\n\n\nirissubset = head(iris %&gt;% select(Species, everything()))\n\n# function to format variables to 2 decimal places\nformat_fn = function(x) formatC(x, format = 'f', digits = 2)\n\n# columns to format\ncols_to_format  = c(\"SP_len_ratio\", \"SP_wid_ratio\")\n\n# calculate the ratios and then format the retios to 2 decimal places using format_fn()\n\nirissubset = irissubset %&gt;% \n  mutate(SP_len_ratio = Sepal.Length/Petal.Length, SP_wid_ratio = Sepal.Width/Petal.Width) %&gt;%\n  mutate_at(.vars = all_of(cols_to_format), .funs = format_fn)\n\n\n\n\nSpeciesSepal.LengthSepal.WidthPetal.LengthPetal.WidthSP_len_ratioSP_wid_ratiosetosa5.13.51.40.23.6417.50setosa4.93.01.40.23.5015.00setosa4.73.21.30.23.6216.00"
  },
  {
    "objectID": "index.html#filter",
    "href": "index.html#filter",
    "title": "Data transformation: dplyr package",
    "section": "Filter()",
    "text": "Filter()\nUsed to extract rows based on a specified condition\n\nfor instance, to extract all rows of the Setosa species\n\n\nirissetosa = iris %&gt;% filter(Species == 'setosa') # keep Setosa Species\n\n\nflextable(table(irissetosa %&gt;% pull(Species)) %&gt;% as.data.frame())\n\n\nVar1Freqsetosa50versicolor0virginica0\n\n\n\nfilter Setosa Species with Sepal length above the median Sepal Length\n\n\nirissetosa2 = iris %&gt;% filter(Species == 'setosa' & Sepal.Width &gt; median(Sepal.Width))"
  },
  {
    "objectID": "index.html#summarise",
    "href": "index.html#summarise",
    "title": "Data transformation: dplyr package",
    "section": "Summarise()",
    "text": "Summarise()\nProvides summary statistics from a dataset. For instance, if we want to find the median values for Petal columns by species:\n\nmedianPetals &lt;- iris %&gt;% group_by(Species) %&gt;% select(contains('Petal')) %&gt;% \n  summarise(median_Pelal.Length = mean(Petal.Length, na.rm = TRUE),\n  median_Petal.Width = mean(Petal.Width, na.rm = TRUE))\n\n\n\n\nSpeciesmedian_Pelal.Lengthmedian_Petal.Widthsetosa1.4620.246versicolor4.2601.326virginica5.5522.026"
  },
  {
    "objectID": "index.html#group_by",
    "href": "index.html#group_by",
    "title": "Data transformation: dplyr package",
    "section": "Group_by()",
    "text": "Group_by()\nIt helps other functions perform their operations by groups in a dataset. It does not change the data in itself, but changes how the data is interpreted by other functions."
  },
  {
    "objectID": "index.html#other-important-functions-in-dplyr",
    "href": "index.html#other-important-functions-in-dplyr",
    "title": "Data transformation: dplyr package",
    "section": "Other important functions in dplyr",
    "text": "Other important functions in dplyr\nThe functions mentioned are not exhaustive but are among the most commonly used. The package has many other functions that are useful for specific operations."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website provides a summary of some commonly used R packages available on CRAN"
  },
  {
    "objectID": "dvisualization.html",
    "href": "dvisualization.html",
    "title": "Data visualization: ggplot2 package",
    "section": "",
    "text": "Coming soon !!"
  }
]