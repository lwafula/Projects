---
title: "Data transformation: dplyr package"
format: docx
editor: visual
---

```{r xaringan-themer, include=FALSE, warning=FALSE}
# https://pkg.garrickadenbuie.com/xaringanthemer/articles/xaringanthemer.html#themes
library(xaringanthemer)
library(flextable)
library(kableExtra)
library(officer)
library(kableExtra)
library(rmarkdown)
library(openxlsx)
library(readxl)

std_border = fp_border(color="gray")
std_borderFoot = fp_border(color="black", width = 2)

```

# Introduction

Data transformation is an important step before starting to visualize and analyze your data. Transformation may involve:

-   creating new variables and summaries
-   renaming some variables
-   reordering observations
-   format variables
-   select variables
-   perform analyses by group
-   filter/ subset observations
-   etc ...

The *dplyr* package is the workhorse for data transformation in R.

# Installing dplyr

*Dplyr* can be installed in two ways:

-   as a standalone package:

*install.packages("dplyr")*

-   which is then called in R by:

    *library(dplyr)*

-   as part of the *tidyverse* package

    *install.packages('tidyverse')*

    -   Note: *tidyverse* is a collection of packages for data science:

        -   dplyr
        -   ggplot2
        -   tidyr
        -   ...

    -   In this case, loading *tidyverse* automatically loads *dplyr* plus the rest of the packages

    *library(tidyverse)*

We will load *dplyr* as part of *tidyverse* package and show some of its uses on the iris data

```{r loaddplyr, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

#install.packages('tidyverse') # uncomment to install tidyverse

library(tidyverse) 

iris = iris

```

A subset of the iris dataset is shown in the table below:

```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(head(iris)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```

In the next subsections, we will show some key dplyr functions and their examples on the iris data.

# Dplyr functions

## Pipes (\|\> or %\>%)

Pipes are used to combine operations. Pipes are very common in R codes that use functions from *dplyr* and *tidyverse*.

-   say we want to calculate the means for *Sepal.Length* and *Sepal.Width* columns by species for the iris dataset:

    I. One way to do this could be

    -   first, group the observations by *Species*

    -   second, calculate the means for the columns

```{r pipeinSteps, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}
by_group = group_by(iris, Species)

meanSepals <- summarise(by_group, 
                        mean_Sepal.Length = mean(Sepal.Length, na.rm = TRUE),
                        mean_Sepal.Width = mean(Sepal.Width, na.rm = TRUE))

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(meanSepals) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```

II. A second way is to combine the operations through a *pipe*, annotated by *%\>%* or *\|\>* as shown in the code below

```{r pipeinSteps2, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

meanSepals2 <- iris %>% group_by(Species) %>% 
  summarise(mean_Sepal.Length = mean(Sepal.Length, na.rm = TRUE), 
            mean_Sepal.Width = mean(Sepal.Width, na.rm = TRUE))

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(meanSepals2) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```

-   Note:

    -   the *group_by()* and *summarise()* functions used here are discussed in later slides

## Select()

Selects columns by name or position

-   Select all sepal columns by name

```{r selectbyName, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

# Notes:
## pipes: %>%
## select()

irissubset =  iris %>% select(Sepal.Length, Sepal.Width)

```

```{r , echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(head(irissubset)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```

Alternative ways of specifying columns

-   Using *contains* option in *select* function

    -   *contains* picks out all column names having a *Sepal* pattern

```{r selectcontainsbyName, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

# Notes:
## select(contains())

irissubset =  iris %>% select(contains("Sepal"))

```

-   By position

```{r selectbyPositionbyName, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

irissubset =  iris %>% select(1:2)

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(head(irissubset)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```

Other helper functions within *select()*:

-   *starts_with("Sep")*

-   *ends_with("")*

-   *num_range("x", 1:3)*

-   Use *select()* together with *everything()* to reorder columns in a data frame as shown below

Initial order of columns

```{r reorderColsSelect, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

irissubset = head(iris)

```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(head(irissubset)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


After moving Species and Petal columns to start


```{r reoderSelect2, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

arranged_iris = irissubset %>% select(Species, contains("Petal"), everything()) 

```

```{r , echo=FALSE, warning=FALSE, message=FALSE}

flextable(head(arranged_iris)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


## Arrange()

Sorts rows according to one or more columns
  
* by default, _arrange()_ sorts in an ascending order

* to change to descending order, place a **minus sign (i.e. -)** before the ordering column
  
  * alternative 2: use *desc(column)* function
      
  * missing values are always sorted to the end
  
  
### Arrange: Ascending


* Before _arrange()_ is applied

  * For illustration, only the sepal columns are used

```{r arrangebeforeSelect, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}
# Notes
## pipes: %>%
## select() 

irissubset = iris %>% select(c(Sepal.Length, Sepal.Width))

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(head(irissubset)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


* After _arrange()_ is applied on _Sepal.Length_ column

```{r arrangeWH, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

# Notes:
## pipes: %>%
## arrange()

arranged_iris = irissubset %>% arrange(Sepal.Length)

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(head(arranged_iris)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


### Arrange: Descending 

* Before _arrange()_

  * For illustration, only the sepal columns are used

```{r arrangebeforeSelect2, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}
# Notes
## pipes: %>%
## select() 

irissubset = iris %>% select(c(Sepal.Length, Sepal.Width))

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(head(irissubset)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


* After applying _arrange()_ on _Sepal.Length_ column

```{r arrangeWH2, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

# Notes:
## pipes: %>%
## arrange()

arranged_iris2 = irissubset %>% arrange(-Sepal.Length)

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(head(arranged_iris2)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```

### Arrange on two columns 

* Before _arrange()_

  * For illustration, only the sepal columns are used

```{r arrangebeforeSelect3, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}
# Notes
## pipes: %>%
## select() 

irissubset = iris %>% select(c(Sepal.Length, Sepal.Width))

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(head(irissubset)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


* After _arrange()_ 

  * decreasing _Sepal.Length_, increasing _Sepal.Width_

```{r arrangeWH3, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

# Notes:
## pipes: %>%
## arrange()

arranged_iris3 = irissubset %>% arrange(-Sepal.Length, Sepal.Width)

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(head(arranged_iris3)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


## Mutate()

For creating new variables to a dataset and/or transforming existing variables

* the columns are always added at the end of the dataset
* as an example, if we want to calculate differences between Sepal & Petal lengths and widths

```{r mutatediff, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

irissubset = head(iris %>% select(Species, everything()))
irissubset = irissubset %>% 
  mutate(SP_length_diff = Sepal.Length-Petal.Length, SP_width_diff = Sepal.Width - Petal.Width)

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(irissubset) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


Similar to _select()_, _mutate()_ can use many functions to create new variables:

* arithmetic operators: +, -, *, /
* logs
* offsets e.g. _lead()_, _lag()_
* cumulative and rolling aggregates: _cumprod()_, _cumsum()_, _cummean()_ etc


### mutate_if()

Checks if a condition is met before applying a transformation to a column

* say we want to format all character variables to be factors in the iris dataset


```{r mutateif, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}
irissubset = head(iris %>% select(Species, everything()))

# calculate the ratios and then format the rel
irissubset = irissubset %>% 
  mutate(SP_len_ratio = Sepal.Length/Petal.Length, SP_wid_ratio = Sepal.Width/Petal.Width) %>%
  mutate_if(is.character, as.factor)

```


### mutate_at()

Allows to specify specific columns on which an operation should be performed

* say we want to format all ratios between corresponding Sepal and Petal variables to appear with 2 decimal places


```{r mutateat, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}
irissubset = head(iris %>% select(Species, everything()))

# function to format variables to 2 decimal places
format_fn = function(x) formatC(x, format = 'f', digits = 2)

# columns to format
cols_to_format  = c("SP_len_ratio", "SP_wid_ratio")

# calculate the ratios and then format the retios to 2 decimal places using format_fn()

irissubset = irissubset %>% 
  mutate(SP_len_ratio = Sepal.Length/Petal.Length, SP_wid_ratio = Sepal.Width/Petal.Width) %>%
  mutate_at(.vars = all_of(cols_to_format), .funs = format_fn)

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# plot code here
# 

flextable(head(irissubset, 3)) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


## Filter()

Used to extract rows based on a specified condition

* for instance, to extract all rows of the **Setosa** species

```{r filterdf, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

irissetosa = iris %>% filter(Species == 'setosa') # keep Setosa Species


```


```{r}
flextable(table(irissetosa %>% pull(Species)) %>% as.data.frame())

```


* filter Setosa Species with Sepal length above the median Sepal Length

```{r filterdf2, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

irissetosa2 = iris %>% filter(Species == 'setosa' & Sepal.Width > median(Sepal.Width)) 

```


## Summarise()

Provides summary statistics from a dataset. For instance, if we want to find the median values for Petal columns by species:

```{r summarise, echo=TRUE, warning=FALSE, message=FALSE, eval=TRUE}

medianPetals <- iris %>% group_by(Species) %>% select(contains('Petal')) %>% 
  summarise(median_Pelal.Length = mean(Petal.Length, na.rm = TRUE),
  median_Petal.Width = mean(Petal.Width, na.rm = TRUE))

```


```{r, echo=FALSE, warning=FALSE, message=FALSE}

flextable(medianPetals) %>% hline(part="body", border = std_border) %>% 
  hline_bottom(part="body", border = std_borderFoot) %>% 
  hline_top(part="body", border = std_borderFoot) %>% vline(border = std_border, part = "all") %>% 
  align(align = "center", part = "all") %>% align(align = "left", part = "all", j = 1) %>% 
  fix_border_issues(part = "all") %>% hline_top(part="header", border = std_borderFoot) %>% 
  fontsize(size = 12, part = "all")

```


## Group_by()

It helps other functions perform their operations by groups in a dataset. It does not change the data in itself, but changes how the data is interpreted by other functions. 


## Other important functions in dplyr

The functions mentioned are not exhaustive but are among the most commonly used. The package has many other functions that are useful for specific operations.  


# Resources

* <https://r4ds.had.co.nz/transform.html>
* <https://cran.r-project.org/web/packages/dplyr/dplyr.pdf>
<!-- * .left[<https://www.nbshare.io/notebook/27204389/How-To-Use-R-Dplyr-Package/>] -->
<!-- * .left[<https://towardsdatascience.com/data-transformation-in-r-288e95438ff9>] -->
